# Github Actions Workflow
name: MLOPS CICD

# When this workflow should run
on:
  push:
    branches:
      - main # Runs the workflow whenever code is pushed to the main branch

jobs:
  mlops_workflow:
    runs-on: ubuntu-latest
    environment: production

    env:
      MODEL_NAME: ${{ secrets.MODEL_NAME }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      MLFLOW_TRACKING_USERNAME: ${{ secrets.MLFLOW_TRACKING_USERNAME }}
      MLFLOW_TRACKING_PASSWORD: ${{ secrets.MLFLOW_TRACKING_PASSWORD }}
      MODEL_TRAINER_REPO_OWNER: ${{ secrets.MODEL_TRAINER_REPO_OWNER }}
      MODEL_TRAINER_REPO_NAME: ${{ secrets.MODEL_TRAINER_REPO_NAME }}
      DVC_REMOTE_ACCESS_KEY_ID: ${{ secrets.DVC_REMOTE_ACCESS_KEY_ID }}
      DVC_REMOTE_SECRET_ACCESS_KEY: ${{ secrets.DVC_REMOTE_SECRET_ACCESS_KEY }}

    steps: # Steps that run inside this job
      # Step 1: Checkout the repository to the runner
      - name: Checkout repository
        uses: actions/checkout@v4 # Official GitHub action to clone your repo

      # Step 2: Set up a specific Python version for the environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      # Step 3: Install project dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip    
          pip install --no-cache-dir -r requirements.txt
          python -m spacy download en_core_web_sm

      # Step 4: Run the ML pipeline
      - name: Run ML pipeline
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.DVC_REMOTE_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DVC_REMOTE_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-1
        run: |
          dvc pull
          dvc repro
          dvc push

      # Step 5: Run all tests using pytest
      - name: Run tests
        run: |
          pytest -v

      # Step 6: Login to AWS ECR
      - name: Login to Amazon ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-south-1
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Step 7: Build and push the Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: 496203436427.dkr.ecr.ap-south-1.amazonaws.com/rishabhpancholi/real-fake-job-detection-api:latest

      # Step 8:
      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@v1.0.3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-south-1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "Logging to ECR"
            aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 496203436427.dkr.ecr.ap-south-1.amazonaws.com
            echo "Pulling Latest Image"
            docker pull 496203436427.dkr.ecr.ap-south-1.amazonaws.com/rishabhpancholi/real-fake-job-detection-api:latest
            echo "Stopping old container"
            docker-compose down
            echo "Runing new container"
            docker-compose up -d
